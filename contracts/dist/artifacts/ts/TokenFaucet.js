"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenFaucetInstance = exports.TokenFaucet = void 0;
const web3_1 = require("@alephium/web3");
const TokenFaucet_ral_json_1 = __importDefault(require("../TokenFaucet.ral.json"));
const contracts_1 = require("./contracts");
class Factory extends web3_1.ContractFactory {
    constructor() {
        super(...arguments);
        this.eventIndex = { Withdraw: 0 };
        this.consts = { ErrorCodes: { InvalidWithdrawAmount: BigInt("0") } };
        this.tests = {
            getSymbol: async (params) => {
                return (0, web3_1.testMethod)(this, "getSymbol", params, contracts_1.getContractByCodeHash);
            },
            getName: async (params) => {
                return (0, web3_1.testMethod)(this, "getName", params, contracts_1.getContractByCodeHash);
            },
            getDecimals: async (params) => {
                return (0, web3_1.testMethod)(this, "getDecimals", params, contracts_1.getContractByCodeHash);
            },
            getTotalSupply: async (params) => {
                return (0, web3_1.testMethod)(this, "getTotalSupply", params, contracts_1.getContractByCodeHash);
            },
            balance: async (params) => {
                return (0, web3_1.testMethod)(this, "balance", params, contracts_1.getContractByCodeHash);
            },
            withdraw: async (params) => {
                return (0, web3_1.testMethod)(this, "withdraw", params, contracts_1.getContractByCodeHash);
            },
        };
    }
    encodeFields(fields) {
        return (0, web3_1.encodeContractFields)((0, web3_1.addStdIdToFields)(this.contract, fields), this.contract.fieldsSig, []);
    }
    at(address) {
        return new TokenFaucetInstance(address);
    }
    stateForTest(initFields, asset, address) {
        return this.stateForTest_(initFields, asset, address, undefined);
    }
}
// Use this object to test and deploy the contract
exports.TokenFaucet = new Factory(web3_1.Contract.fromJson(TokenFaucet_ral_json_1.default, "=20-2+71=111-1+4=10+a0007e02175468652063757272656e742062616c616e63652069732000=46", "06b49f3673daa80e1a2452f6478c177652dd9b9a5730be557aa9dd6dda347152", []));
(0, contracts_1.registerContract)(exports.TokenFaucet);
// Use this class to interact with the blockchain
class TokenFaucetInstance extends web3_1.ContractInstance {
    constructor(address) {
        super(address);
        this.view = {
            getSymbol: async (params) => {
                return (0, web3_1.callMethod)(exports.TokenFaucet, this, "getSymbol", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getName: async (params) => {
                return (0, web3_1.callMethod)(exports.TokenFaucet, this, "getName", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getDecimals: async (params) => {
                return (0, web3_1.callMethod)(exports.TokenFaucet, this, "getDecimals", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getTotalSupply: async (params) => {
                return (0, web3_1.callMethod)(exports.TokenFaucet, this, "getTotalSupply", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            balance: async (params) => {
                return (0, web3_1.callMethod)(exports.TokenFaucet, this, "balance", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            withdraw: async (params) => {
                return (0, web3_1.callMethod)(exports.TokenFaucet, this, "withdraw", params, contracts_1.getContractByCodeHash);
            },
        };
        this.transact = {
            getSymbol: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.TokenFaucet, this, "getSymbol", params);
            },
            getName: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.TokenFaucet, this, "getName", params);
            },
            getDecimals: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.TokenFaucet, this, "getDecimals", params);
            },
            getTotalSupply: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.TokenFaucet, this, "getTotalSupply", params);
            },
            balance: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.TokenFaucet, this, "balance", params);
            },
            withdraw: async (params) => {
                return (0, web3_1.signExecuteMethod)(exports.TokenFaucet, this, "withdraw", params);
            },
        };
    }
    async fetchState() {
        return (0, web3_1.fetchContractState)(exports.TokenFaucet, this);
    }
    async getContractEventsCurrentCount() {
        return (0, web3_1.getContractEventsCurrentCount)(this.address);
    }
    subscribeWithdrawEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.TokenFaucet.contract, this, options, "Withdraw", fromCount);
    }
    async multicall(callss) {
        return await (0, web3_1.multicallMethods)(exports.TokenFaucet, this, callss, contracts_1.getContractByCodeHash);
    }
}
exports.TokenFaucetInstance = TokenFaucetInstance;
